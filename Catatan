class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SLNC:
    def __init__(self):
        self.head = None

    def insert(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            temp = self.head
            while temp.next:
                temp = temp.next
            temp.next = new_node

    def delete(self, data):
        if self.head is None:
            return

        if self.head.data == data:
            self.head = self.head.next
            return

        temp = self.head
        while temp.next:
            if temp.next.data == data:
                temp.next = temp.next.next
                return
            temp = temp.next

    def getLength(self):
        length = 0
        temp = self.head
        while temp:
            length += 1
            temp = temp.next
        return length

    def WriteAllData(self):
        if self.head is None:
            print("Linked List: No data")
            return
        
        temp = self.head
        data_list = []
        while temp:
            data_list.append(temp.data)
            temp = temp.next

        print(f"Linked List: {len(data_list)} data:")
        print(" ".join(map(str, data_list)))

    def getData(self, index):
        temp = self.head
        current_index = 0
        while temp:
            if current_index == index:
                return temp.data
            current_index += 1
            temp = temp.next
        return None  # Jika index di luar range

    def hapusDuplikasi(self):
        if self.head is None:
            return

        current = self.head
        while current and current.next:
            runner = current
            while runner.next:
                if runner.next.data == current.data:
                    runner.next = runner.next.next  # Hapus duplikasi
                else:
                    runner = runner.next
            current = current.next

# Contoh penggunaan SLNC:

ll = SLNC()
ll.insert(1)
ll.insert(2)
ll.insert(2)
ll.insert(2)
ll.insert(3)
ll.insert(3)
ll.insert(4)

ll.WriteAllData()  # Output linked list sebelum penghapusan duplikasi

ll.hapusDuplikasi()
ll.WriteAllData()  # Output linked list setelah penghapusan duplikasi

print(ll.getLength())  # Mendapatkan panjang linked list

print(ll.getData(2))  # Mendapatkan data pada index ke-2
